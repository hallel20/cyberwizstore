generator client {
  provider = "prisma-client-js"
}

// schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  slug          String     @unique
  parentId      Int?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int              @default(0)
  sku         String           @unique
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  image       String
  image2      String?
  image3      String?
  image4      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orderItems  OrderItem[]
}

model ProductVariant {
  id            Int         @id @default(autoincrement())
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  variantName   String // e.g., "Color" or "Size"
  variantOption String // e.g., "Red" or "Medium"
  priceModifier Float? // Additional price based on variant, optional
  stock         Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  status     String      @default("Pending")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  totalPrice Float
  items      OrderItem[]
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  orderId    Int
  order      Order           @relation(fields: [orderId], references: [id])
  productId  Int
  product    Product         @relation(fields: [productId], references: [id])
  variantId  Int?
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  quantity   Int
  unitPrice  Float // price at the time of the order
  totalPrice Float
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}
